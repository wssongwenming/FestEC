* @param set              the annotation types requested to be processed
 * @param roundEnvironment environment for information about the current and prior round
 * @return
 */
@Override
public boolean process(Set<? extends TypeElement> set, RoundEnvironment roundEnvironment) {
    if (set != null && !set.isEmpty()) {

        WXEntryAnnotationVisitor visitor = new WXEntryAnnotationVisitor(processingEnv.getFiler());
        for (TypeElement typeElement : set) {

            //在这里我们已经明确的知道WXEntryAnnotation只能用于type类型，因此可以使用ElementFilter.typesIn将其转化为具体的TypeElement类型的集合。
            Set<TypeElement> typeElements = ElementFilter.typesIn(elementsAnnotatedWith);

            //遍历使用该注解的类，方法，属性
            for (TypeElement element : typeElements) {


                List<? extends AnnotationMirror> annotationMirrors = element.getAnnotationMirrors();
                for (AnnotationMirror annotationMirror : annotationMirrors) {


                    //判断当前处理的注解就是扫描出来的注解
                    if (annotationMirror.getAnnotationType().asElement().getSimpleName().toString().equals(typeElement.getSimpleName().toString())) {
                        //获取注解的值
                        Map<? extends ExecutableElement, ? extends AnnotationValue> elementValues = annotationMirror.getElementValues();

                        for (Map.Entry<? extends ExecutableElement, ? extends AnnotationValue> entry : elementValues.entrySet()) {

                            AnnotationValue value = entry.getValue();

                            value.accept(visitor, null);
                        }

                    }
                }
            }
        }
        return true;
    }
    return false;
}

作者：六号表哥
链接：https://www.jianshu.com/p/23c8ab5f2de6
來源：简书
简书著作权归作者所有，任何形式的转载都请联系作者获得授权并注明出处。